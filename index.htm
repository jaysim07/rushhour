<html lang="en" >

<head>

  <meta charset="UTF-8">

  <title>심재이(jaycom) - 러쉬아워</title>

<!-- 심재이 : css 프레임워크  -->
  <!--<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@picocss/pico@1/css/pico.min.css">-->
  <script src='jquery-3.7.1.min.js'></script>


<!-- UIkit CSS -->
<link rel="stylesheet" href="uikit.min.css" />
<!-- UIkit JS -->
<script src="uikit.min.js"></script>
<script src="uikit-icons.min.js"></script>

  <!--콘바 프레임 워크-->
  <script src="konva.min.js"></script>
  <!--게임 데이터 로딩 하는 것 -->
  <script src="game_data.js"></script>
  <!--랭킹데이터 로딩하는 것-->
  <script src="ranking_data.js"></script>

  <!-- 심재이 : 파비콘-->

    <link rel="shortcut icon" href="/favicon/favicon.ico"> <!--추가-->
    <link rel="apple-touch-icon" sizes="57x57" href="/favicon/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/favicon/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/favicon/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/favicon/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/favicon/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/favicon/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/favicon/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/favicon/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/favicon/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192"  href="/favicon/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="/favicon/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon/favicon-16x16.png">
    <link rel="manifest" href="/favicon/manifest.json">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="/favicon/ms-icon-144x144.png">
    <meta name="theme-color" content="#ffffff">


    <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1, minimum-scale=1.0, maximum-scale=1.0" />


    <style>

        .jbtn{
          width:40px;
          height:42px;
          padding:0;
          margin:0;
          cursor: pointer;

        }

        /* button {
          -webkit-appearance: none;
          -moz-appearance: none;
          appearance: none;
        }  */

        /* PC , 테블릿 가로 (해상도 768px ~ 1023px)*/
        @media all and (min-width:768px) and (max-width:2023px) { /*스타일입력*/
          .c_size{
            max-width: 560px;
            max-height:600px;

          }
          .c_ruby{
            height:93%;
          }
        }

        /* 테블릿 세로 (해상도 768px ~ 1023px)*/
        @media all and (min-width:768px) and (max-width:1023px) { /*스타일입력*/
          .c_size{
           max-width: 500px;
           max-height:570px;
          }
          .c_ruby{
            height:88%;
          }
        }

        /* 모바일 가로, 테블릿 세로 (해상도 480px ~ 767px)*/
        @media all and (min-width:480px) and (max-width:767px) { /*스타일입력*/
          .c_size{
           max-width: 480px;
           max-height:550px;
          }
          .c_ruby{
            height:93%;
          }
        }

        /* 모바일 가로, 테블릿 세로 (해상도 ~ 479px)*/
        @media all and (max-width:479px) { /*스타일입력*/
          .c_size{
           max-width: 380px;
           max-height:420px;
          }
          .c_ruby{
            height:90.5%;
          }
        }


    </style>


  <script>

    const myAudio = new Audio(); // Aduio 객체 생성
    myAudio.src = "./sound/gameclear.mp3"; // 음원 파일 설정

    // myAudio.play(); // 음원 재생
    // myAudio.pause(); // 일시 정지
    // ------------------------------------------------------------------
    // ---  전역변수..
    // ------------------------------------------------------------------

    var ar_BOARD = [];   // 이차원배열변수이면서 전체보드를 관장할 수 있다
    var la_1 = new Konva.Layer({ draggable:false });  // 보드 레이어
    //한개의 정사각형 셀변의 길이
    var car_color = ["white","black","red","purple","green","orange","blue","skyblue","brown","yellow","magenta","pink","gray","HotPink","DarkRed","Lime","black"]; //자동차 순서별로 색상
    var cell_size = 81; //보드 조각하나의 사이즈

     // alert(window.innerWidth + "/" + cell_size);
    // if (window.innerWidth<450) {
    //   cell_size = 57;
    // }
    // if (window.innerWidth<380) {
    //   cell_size = 50;
    // }

    var cell_gap = 3;     //보드 조각마다 사이의 빈틈
    var board_size = 6;   //보드 전체 가로 세로 셀 갯수가 6개 (정사각형)
    var car_pos_x = 0;    // 자동차가 움직이기 전 위치를 기억하기 위한 변수
    var car_pos_y = 0;    // 자동차가 움직이기 전 위치를 기억하기 위한 변수
    var move_count = 0;   //몇번 움직였는지 세는 변수
    var CARS = [];        //자동차 배열
    var STAGE_IDX = 0;    //몇번째 판인지

    // ----------------------------------
    CARS.push([0,0,0,0,0]);
    CARS.push([1,1,0,1,1]);
    // ----------------------------------

    $(document).ready(function(){

        // alert(window.innerWidth);
        // cell_size = window.innerWidth / 15;

        // $('#paper-back').load('menu.php');

        make_board();     //가상보드를 만든다 .
        init_data();      //보드를 루프를 돌면서 만든다 .


         // UIkit.modal("#modal-center").show();

         console.log(GAME_DATA);

         map_loading(0);    //판을 로딩하는 함수
    });


    // #################################################################################
    // *  map_loading
    //
    // map_loading은  버튼의 판 숫자에 따라서 자동차의 데이터를 가져와서 뿌려주는 역할
    // STAGE_IDX는 데이터베이스에서 각게임의번호를 의미한다 0~39총 40게임
    // iAdd는 이전버튼을 누르면 -1을 해주고 다음 버튼 을 누르면 게임번호가 +1이 되어서
    // 나와야 하는데 그 번호를 버튼누르는 거에 따라서 +-1인지 설정한다
    // #################################################################################
      function map_loading (iAdd){

         STAGE_IDX = STAGE_IDX + iAdd;
        // 게임번호가 0보다 작은경우는 0으로 설정한다.
        if (STAGE_IDX < 0){
          STAGE_IDX=0;
        }

        // 게임 숫자가 데이터베이스 게임보다 많으면 데이터 베이스게임 수가 넘어가지 못하도록 제한해준다
        if (STAGE_IDX > (GAME_DATA.length-1)){
          STAGE_IDX=(GAME_DATA.length-1);
        }

        // --
        console.log("STAGE_IDX" , STAGE_IDX, iAdd);

        //버튼에 id를 주어서 버튼을 지정하고 버튼의 숫자를 출력한다 .
        document.getElementById("b_STAGE_IDX").innerHTML = STAGE_IDX+1;
        document.getElementById("game_num").innerHTML = "러쉬아워 "  + (STAGE_IDX +1) + " 단계";

        //디음이나 이전을 누를 때마다 게임을 초기화한다.
        stage_clear();
        document.getElementById("ruby").style.display="block";
        //디음이나 이전 버튼 누르는 거에 따라 파라메터로 뭐가눌리는지 구분하고  증가하거나 감소시킨다

        document.getElementById("b_count").innerHTML = move_count;
      }
    // #################################################################################

    // #################################################################################
    // *  stage_clear
    // #################################################################################
    function stage_clear (){

        // la_1.removeChildren();
        // la_1.removeName("car");   //이거는 콘바에서 제공하는 것임 그리고 레이어 위에 모든 자동차를 제거한다
        var cars = la_1.find('.car');  // la_1이라는 레이어 위의 엘리먼트중에서 이름이 car인것을 다 찾아줌

        for (var i=0;i<cars.length;i++){
          cars[i].remove();
        }

        // console.log(la_1 );

        ar_BOARD = [];  //가상좌표를 초기화해주는 것        stage_clear를 할때 함계 해준다 .
        make_board();  //가상조표를 초기화한 다음에 다시 0,1 로만 보드를 만든다.
        CARS = [];

        console.log(ar_BOARD,CARS );

        // ----------------------------------
        CARS.push([0,0,0,0,0]);
        CARS.push([1,1,0,1,1]);
        // ----------------------------------

        // game_data.js 에서  자동차의 갯수만큼 루프를 돌면서  자동차를 속성에 맞게 만들어준다 .
        for (var i=0;i<GAME_DATA[STAGE_IDX].carmap.length;i++) {

            console.log ("자동차데이터", GAME_DATA[STAGE_IDX].carmap[i].CAR, GAME_DATA[STAGE_IDX].carmap.length);
            var arr = GAME_DATA[STAGE_IDX].carmap[i].CAR.split(',');  // arr = [2,3,2,0,1,2]
            // f_car(x,y,size,hv,redcar,color){
            f_car(Number(arr[0]),Number(arr[1]),Number(arr[2]),Number(arr[3]),Number(arr[4]),Number(arr[5]));

        }

        console.log(ar_BOARD,CARS );

    }


    // #################################################################################
    //게임시작함수
    //게임시작 버튼 누르면 루비가 사라진다
    // #################################################################################
    function game_start(){
      // alert("게임시작");
      document.getElementById("ruby").style.display="none";

    }

    // #################################################################################


    // ------------------------------------------------------------------
    // f_car는 자동차의 속성을 지정하는 변수이다. 자동차 한대를 만들어준다.
    // 데이터베이스에서 데이터를 가져와서
    // x 는 자동차의 x좌표 위치를 말한다. ( 0, 1 , 2, 3, 4 ,5, 7)
    // y는 자동차의 y좌표위치를  말한다.( 0, 1 , 2, 3, 4 ,5, 7)
    //size는 자동차의 길이를 의미한다  ex) 2 : 2칸, 3: 3칸 ,gka
    //hv는 가로로 세로로 자동차를 배치하는 것을 의미한다. ex)자동차의 회전각도 0:가로 90:세로
    //redcar는 나가야 하는 차인지를 말한다 ex)0은 일반차 1은 빨간차 (나가야 하는 차)
    //color는 자동차의 색상을 의미한다. ex)red,blue,skyblue,purple
    // ------------------------------------------------------------------
    function f_car(x,y,size,hv,redcar,color){

      console.log("자동차 좌표:", color.toString(), x,y, size,hv,redcar);

      CARS.push([color,size,hv,x,y]);

      // make_car(x,y,size,hv,redcar,color);

      x = x - 1;
      y = y - 1;
      //redcar는 1로 지정
      if (redcar==1){
        color=2;
      }
      //자동차 축을 기준으로  y축의 위치를 구하는 식
      var i_posy = (cell_size*y)+3*y;
      //자동차 축을 기준으로  x축의 위치를 구하는 식
      var i_posx = (cell_size*x)+3*x;
      //i_width는 공백의 갯수와 크기를 계산하여 자동차의 크기를 설정함.
      var i_width = (cell_size*size)+(3*(size-1));
      //x,y축의 위치를 콘솔에 나타냄
      //console.log(x,y, i_posx,i_posy);

      //만약에 세로(90)로 놓아져있다면 가로와 세로를 한번 바꿔주지만 회전은 하지 않는다 .
      if (hv==90){ //세로자동차
        // ------------------------
        var car = new Konva.Rect({ name:"car", id:color.toString(), x: i_posx, y: i_posy, width: cell_size ,height:i_width, fill: car_color[color],stroke:car_color[color], strokeWidth: 0,draggable: true, rotation:0,
          dragBoundFunc: function (pos) {
          //console.log(pos.x,pos.y);
          //자동차가 주차장을 벗어나지 않도록 y좌표를 계산하는 알고리즘
          if (pos.y>(6-size)*cell_size+(3*(6-size))) {
            pos.y=(6-size)*cell_size+(3*(6-size));
          }
          //자동차가 위쪽  밖으로 나가지 않도록 하는 알고리즘
          if (pos.y<0) { pos.y=0; }

          // if (pos_chk(pos.y - car_pos_y, i_posx, pos.y, color )==false){
          //   // pos.y = car_pos_y;
          // }

          pos.y = pos_chk2(pos.y - car_pos_y, i_posx, pos.y, color);
          car_pos_y = pos.y;

          // ---
          return { x: pos.x, y: pos.y, };
          },
        });

        var originalX = car.x();
        car.on('dragmove', () => {

          // x포지션은 고정
          // y포지션은 윰직인다.
          car.x(originalX);

          // console.log(car.x(),car.y(),car_pos_y);

        });
        car.on('dragstart', function () {

                car_start_y = car.y();
                console.log('dragstart2',car_start_y);
              });
        car.on('dragend', function () {
                  console.log('dragend1');

                  console.log(move_count);
                  move_count_ds();
                  // if ( car.y()<(cell_size/2) ) {
                  //   car.y(0);
                  // }
                  // if ( car.y()>cell_size/2 && car.y()<cell_size+cell_size/2 ) {
                  //   car.y(cell_size+3);
                  // }
                  // if ( car.y()>cell_size+cell_size/2 && car.y()<cell_size*2+cell_size/2 ) {
                  //   car.y(cell_size*2 + 2*3);
                  // }
                  // if ( car.y()>cell_size*2+cell_size/2 && car.y()<cell_size*3+cell_size/2) {
                  //   car.y(3*cell_size+9);
                  // }
                  // if ( car.y()>cell_size*3+cell_size/2 ) {
                  //   car.y(4*cell_size+12);
                  // }
                  //----자동차를 마우스로 드레그엔드했을 떄 가까운 칸에 맞춰서 위치가 지정됨.
                  for (var i=0;i<6;i++){
                    if ( car.y()> cell_size*(i-1) + cell_size/2 && car.y()< cell_size*(i) + cell_size/2 + i*3 ) {
                      car.y(i*cell_size + i*3 );
                    }
                  }
                  pos_map_all();
                  chk_gameclear();
                  console.log(ar_BOARD,CARS);
              });
        // ------------------------

      } else {


        // ------------------------가로자동차
        var car = new Konva.Rect({ name:"car", id:color.toString(), x: i_posx, y: i_posy, width: i_width ,height:cell_size, fill: car_color[color],stroke: car_color[color], strokeWidth: 0,draggable: true, rotation:0,
          dragBoundFunc: function (pos) {
          //console.log(pos.x,pos.y);
          //자동차가 주차장을 벗어나지 않도록 x좌표를 계산하는 알고리즘
          if (pos.x>(6-size)*cell_size+(3*(6-size))) {
            pos.x=(6-size)*cell_size+(3*(6-size));
          }
          //자동차가 왼쪽 밖으로 나가지 않도록 하는 알고리즘
          if (pos.x<0) { pos.x=0; }

          pos.x = pos_chk2(pos.x - car_pos_x, pos.x, i_posy, color);
          car_pos_x = pos.x;

          return { x: pos.x, y: pos.y, };
          },
        });

        var originalY = car.y();
        car.on('dragmove', () => {
          // x포지션만 움직일거
          // y축 그대로
          car.y(originalY);
          // console.log(car.x(),car.y());
          //console.log(car.getAttr('id'));
        });

        car.on('dragstart', function () {
                console.log('dragstart3');
              });
        car.on('dragend', function () {

                  move_count_ds();
                  console.log('dragend2')
                  for (var i=0;i<6;i++){
                    if ( car.x()> cell_size*(i-1) + cell_size/2 && car.x()< cell_size*(i) + cell_size/2 + i*3 ) {
                      car.x(i*cell_size + i*3 );
                    }
                  }
                  //car.x(0);
                  pos_map_all();
                  chk_gameclear();
              });

        // ------------------------
      }


      //마우스가 자동차위로 갔을때 커서 포인트가 바뀜
      car.on('mouseover', function () {
        document.body.style.cursor = 'pointer';
      });
      //마우스가 자동처를 벗어나면 커서포인트가 정상이 된다.
      car.on('mouseout', function () {
        document.body.style.cursor = 'default';
      });
      //자동차 추가
      la_1.add(car);


      pos_map(i_posx,i_posy,size,hv,color);


    }
    // --------------------------------------------- f_car함수의 끝




    //어떤 자동차 종류의 갯
    // function f_carn
    // ------------------------------------------------------------------
    // ---  게임초기화 데이터 로딩
    // ------------------------------------------------------------------
      function init_data() {

        var clientWidth = document.getElementById('rushhour').clientWidth;
        var i_width = window.innerWidth-20;
        if(i_width>=560){
          i_width=560;
        }

        // (clientWidth<560) {
          cell_size = (clientWidth-15)/6;
        //}

        var i_height = i_width;
        var stage_1 = new Konva.Stage({ container: "rushhour", width:i_width, height: i_height, });

        // var la_1 = new Konva.Layer({ draggable:true });


        // -------------------------------------------------------------------------
        // 보드만들기
        // -------------------------------------------------------------------------
         //한 조각 가로 세로 길이
        var step; //반복을위한 변
        var pos_x = 0; //한 조각 각각의 x축 위치
        var pos_y = 0; //한조각 각각의 y축 위치
        var iBoard_Size = 6; //전체 보드 사이즈 ,가로 세로 조각 갯수

        // 보드  사이즈 x보드 사이즈 의 개수 만큼 루프를 돈다
        for (step = 0; step < (iBoard_Size*iBoard_Size); step++) {

            // 사각형 만드는 거
            var rect2 = new Konva.Rect({ x: pos_x, y: pos_y, width: cell_size, height: cell_size, fill: '#423463', stroke: '#123456', strokeWidth: 0, draggable:false, rotation:0, });
            la_1.add(rect2);
            //Sconsole.log(step, pos_x,pos_y);
            //루프 한번 돌때 마다 정사각형 위치 바꿔서 놓이주는 것
            pos_x = pos_x + cell_size+3;

            //만약 보드 사이즈 가로 세로 갯수만큼 정사각형 모양대로 배치한다
            if (step % (iBoard_Size)==iBoard_Size-1){
              pos_y = pos_y + cell_size+3;
              pos_x = 0;
            }
        }
        // -------------------------------------------------------------------------
        // -------------------------------------------------------------------------
        // 1번
        // f_car(2,3,2,0,1,2);
        // f_car(1,2,3,90,0,3);
        // f_car(1,1,2,0,0,4);
        // f_car(1,5,2,90,0,5);
        // f_car(2,4,3,0,0,6);
        // f_car(4,1,3,90,0,7);
        // f_car(5,2,3,90,0,8);
        // f_car(6,1,2,90,0,9);
        // f_car(6,3,2,90,0,10);
        // f_car(5,5,2,0,0,11);
        // f_car(5,6,2,0,0,12);


        // console.log (ar_BOARD);
        // console.log (CARS);

        // f_car(0,0,2,0,1,"purple");
        // f_car(0,0,2,0,1,"purple");
        // f_car(0,0,2,0,1,"purple");
        // f_car(0,0,2,0,1,"purple");
        // f_car(0,0,2,0,1,"purple");
        // f_car(0,0,2,0,1,"purple");
        // f_car(0,0,2,0,1,"purple");

        // for (step = 0; step <1;step++) {
        //
        // }
        // for (step = 0; step <1;step++) {
        //   f_car(1,4,4,0,0,'blue');
        // }
        // for (step = 0; step <1;step++) {
        //   f_car(2,5,3,90,0,'skyblue');
        // }


        // var img1 = new Image();
        //
        // img1.onload = function () {
        //     var aaa1 = new Konva.Image({ x: 100, y: 100, image: img1, width: 123, height: 123, draggable:true, rotation:90, });
        //     la_1.add(aaa1);
        // };
        //
        // img1.src = '../favicon/apple-icon-144x144.png';


        stage_1.add(la_1);
        la_1.draw();
        la_1.add(rect2);
    }


    // ------------------------------------------------------------------
    // ---  기본 가상좌표 보드 만들기
    // ------------------------------------------------------------------
    function make_board (){

      ar_BOARD.push([1,1,1,1,1,1,1,1]);
      ar_BOARD.push([1,0,0,0,0,0,0,1]);
      ar_BOARD.push([1,0,0,0,0,0,0,1]);
      ar_BOARD.push([1,0,0,0,0,0,0,-1]);
      ar_BOARD.push([1,0,0,0,0,0,0,1]);
      ar_BOARD.push([1,0,0,0,0,0,0,1]);
      ar_BOARD.push([1,0,0,0,0,0,0,1]);
      ar_BOARD.push([1,1,1,1,1,1,1,1]);

      //make_car(2,3,3,90,1,3);

    }

    /*
      make_car x:(왼쪽 위를 기준으로)0부터 시작하는 x축  , y:(왼쪽 위를 기준으로)0부터 시작하는 y축좌, size :2칸인지 3칸인
    hv :세로인지 가로인지   redcar:1이면 레드카(나가야하는 자동차) 이고 0이면 레드카가 아님 carnum :carnum에 따라 색상
    이 정해진다.

    */

    // ------------------------------------------------------------------
    // --- 속성에 따라 자동차를만들기
    // 가상좌표인 ar_board에 자동차를 배열한다 . (가상좌표)
    // 가로 세로 나뉘어져 있고  자동차의 길이 만큼 루프를 돈다
    //  한개의 자동차만 맾핑한다
    // ------------------------------------------------------------------
    function make_car (x,y,size,hv,redcar,carnum){

      if (hv==90){
        for (var i=0;i<size;i++) {
          ar_BOARD[y+i][x] = carnum;
          //console.log(i);
        }
      }

      if (hv==0){
        for (var i=0;i<size;i++) {
          ar_BOARD[y][x+i] = carnum;
          //console.log(i);
        }
      }
    }

    /*
     자동차의 실제 좌표를 가상좌표로 변환해주는 알고리즘
     pos_map 에서  첫번째는  x의 실제좌표  두번째는 y의 실제 좌표 size는 자동차 사이즈
     hv는 가로 세로 carnum 번호에 따른 색상이다..
     var 부분은 실제좌표를 가상좌표로 변환해주는 알고리즘이다.( x축 y축 둘다 변환해준다)
     for 는 사이즈에따라서 루프 도는 갯수가 정해진다 (사이즈-1)루프를 돌면서 가상좌표를 정해진 구역만큼 만든다.
     가로일때 세로일때 각각 나뉘어있다.
    */
    // ------------------------------------------------------------------
    // ---  가상좌표 보드위에 있는 자동차의 위치를 가상좌표로 나타내주는함수
    // ------------------------------------------------------------------
    function pos_map(x1,y1,size,hv,carnum){
        //console.log(x1,y1,size,hv,carnum);
        var xx = parseInt( (x1+cell_size)/cell_size );  // 2
        var yy = parseInt( (y1+cell_size)/cell_size );  // 1

        if (hv==0) {

            //console.log(xx,yy);
            CARS[carnum][3]=xx;
            CARS[carnum][4]=yy;
            for (var i=0;i<size;i++) {
       	       ar_BOARD[yy][xx+i] = carnum;      //보드에 자동차를 가상좌표 변환 (자동차 한개만) (가로)
            }
        }
        //
        if (hv==90) {
            CARS[carnum][3]=xx;
            CARS[carnum][4]=yy;
            //console.log(xx,yy);
            for (var i=0;i<size;i++) {  // if size : 3 i = 0 1 2 size : i = 2 0 1
       	       ar_BOARD[yy+i][xx] = carnum;     //보드에 자동차를 가상좌표 변환 (자동차 한개만)(세로)
            }
        }

    }

    // -------------------------------------
    //pos_map_clear는 가상좌표를 자동차가 없는 상태로 만들어주는 기능
    //가로 세로 6번만큼 루프를 돌면서 전부 0으로 만들어준다 . (가상좌표 초기화)
    // -------------------------------------
    function pos_map_clear(){
      for (var x=1;x<=board_size;x++) {
        for (var y=1;y<=board_size;y++) {
         ar_BOARD[x][y] = 0;
        }
      }
    }

    // -------------------------------------
    //자동차의 정보를 수집한다
    //자동차의 실제좌표를 가지고 가로 자동차인지 세로 자동차인지 판별
    //다시 자동차를 가상좌표로 배열
    // -------------------------------------
    function pos_map_all(){

        pos_map_clear();

        var cars = la_1.find('.car');  // la_1이라는 레이어 위의 엘리먼트중에서 이름이 car인것을 다 찾아줌

        for (var i=0;i<cars.length;i++){  // length 는 배열에 들어있는 아이템의 개수 입니다.
          //console.log(cars[i].getAttr("id"));  // 각각의 자동차에서 속성을 뽑아냄.
          var num1 = cars[i].getAttr("id");
          var num2 = Number(num1);
          var x1 = cars[i].getAttr("x");
          var y1 = cars[i].getAttr("y");
          var width1 = cars[i].getAttr("width");
          var width2 = Number(width1);
          var height1 = cars[i].getAttr("height");
          var height2 = Number(height1);

          // console.log(width2,height2);
          var size1 = 0;
          var hv1 = 0;
          if (height2==cell_size) {
            hv1=0;
            size1 = parseInt(width2/cell_size);
            // if (width2 ==cell_size*2){
            //   size1=2;
            // }
            // if (width2 ==cell_size*3){
            //   size1=3;
            // }
          }
          if (width2==cell_size) {
            hv1=90;
            size1 = parseInt(height2/cell_size);
            // if (height1 ==cell_size*2){
            //   size1=2;
            // }
            // if (height1 ==cell_size*3){
            //   size1=3;
            // }
          }

          console.log(x1,y1,size1,hv1,num2);
          pos_map(x1,y1,size1,hv1,num2);

        }
         //console.log (ar_BOARD);
        // cars.forEach(function(car) {
        //   // console.log(car.getAttr("id"));
        // });

        // console.log (cars);
        //for (var i=2;i<13;i++){
          // pos_map(x1,y1,size,hv,i)r;
        //}


    }



    function move_count_ds(){
      move_count++;
      document.getElementById("b_count").innerHTML = move_count;

    }

    // -------------------------------------------------------------------
    // 세로로 움직이는 자동차들의 충돌 여부를 확인한다 .
    //세로로 움직이는 모든 자동차의 y 축 정보를 수집하여
    // 수집된 정보를 바탕으로 아래쪽의 y좌표도 알아서
    //수집한 좌표들을 바탕으로 충돌을 감지하고 겹치지 않도록 해준다 .
    //한개의 자동차의 위쪽 좌표뿐만 아니라 아래쪽 좌표도 알게 정보를 수집한다
    // -------------------------------------------------------------------
    function chk_crash_y (carnum, x, y, yy, dir) { // 12 움직이는 자동차

      var cars = la_1.find('.car');

      for (var i=0;i<cars.length;i++){

        var num1 = cars[i].getAttr("id");
        var num2 = Number(num1);
        if (carnum==num2) {

          var x1 = cars[i].getAttr("x");
          var y1 = cars[i].getAttr("y");
          var width1 = cars[i].getAttr("width");
          var width2 = Number(width1);
          var height1 = cars[i].getAttr("height"); // 문자열 변수 height1
          var height2 = Number(height1);  // 숫자형으로 변경함. height2
          var yy1 = y1 + height2;

          console.log ("충돌체크 움직이는자동차의 좌표:",dir,x,y,yy,"앞에 있는 자동차의 자표",x1,y1,yy1 );
            if (dir>0) {
              if (yy>=y1) { //내릴떄
                console.log("내릴때 충돌했다");
                return y1;
              }
            }

            if (dir<0) {
               if (y<=yy1) { //
                 console.log("올릴때 충돌했다");
                 return yy1;
               }
            }
          }
      }

      return -1;
    }

    // -------------------------------------------------------------------
    // 이 함수는 가로로 움직이는 가로 자동차들의 충돌 여부를 감지하고 충돌을 방지 해주는 알고리즘이다
    // 한개의 자동차에서 왼쪽 x좌표뿐만 아니라 오른쪽 x좌표 정보 까지 수집 하여
    //수집한x 좌표를 바탕으로 충돌여부를 감지한다
    // -------------------------------------------------------------------
    function chk_crash_x (carnum, x, xx, dir) { // 12 움직이는 자동차

      var cars = la_1.find('.car');

      for (var i=0;i<cars.length;i++){

        var num1 = cars[i].getAttr("id");
        var num2 = Number(num1);
        if (carnum==num2) {

          var x1 = cars[i].getAttr("x");
          var y1 = cars[i].getAttr("y");
          var width1 = cars[i].getAttr("width");
          var width2 = Number(width1);
          var height1 = cars[i].getAttr("height"); // 문자열 변수 height1
          var height2 = Number(height1);  // 숫자형으로 변경함. height2
          var yy1 = y1 + height2;
          var xx1 = x1 + width2;

            console.log ("충돌체크 움직이는자동차의 좌표:",dir,x,xx,"앞에 있는 자동차의 자표",x1,y1,xx1 );
            if (dir>0) {
              if (xx>=x1) { //오른쪽으로 갈때 충동확 출동확인
                console.log("오른쪽으로 가다가  충돌했다");
                return x1;
              }
            }

             if (dir<0) {
                if (x<=xx1) { //왼쪽으로 갈떄
                  console.log("왼쪽으로 가다가 충돌했다");
                  return xx1;
                }
             }

          }
      }

      return -1;
    }

    // -------------------------------------------------------------------
    // 세로 자동차를 아래로 내릴떄 앞에 자동차가 있는 지 여부를 감지하는 알고리즘이다
    //가상좌표를 수집한다음에 그거를 바탕으로 갈 방향에 남은 칸들을 알아내서
    //남은 칸들 수를 바탕으로 루프를 돌린다
    //자동차의 존재가 사실이 되면 앞에 자동차 잇음 이라는 콘솔 로그를 띄워준다
    // 그리고 그 밑에는 충돌체크 함수를 호출하는 것이다
    //위로 올릴 때도 똑같은 형식으로 한다
    //가로로 움직일때도 똑같은 형
    // -------------------------------------------------------------------
    function pos_chk2 (dir,x,y,carnum){
      // ---- 현재 움직이고 있는 자동차의 사이즈
      var size = CARS[carnum][1];
      var hv = CARS[carnum][2];

      if (hv==90){
        //아래로 내릴떄
        if (dir>0){
          var y_chk = CARS[carnum][4]+size;
          var x_chk = CARS[carnum][3];
          var car_exist = false;
          for (var c=y_chk;c<=6;c++){
            if (ar_BOARD[c][x_chk]!=0){
              car_exist = true;
              console.log ("앞에 자동차 있음",x,y,ar_BOARD[c][x_chk]);
              var yy = y + size *(cell_size+3);
              var yc = chk_crash_y(ar_BOARD[c][x_chk],x,y,yy,dir);
              if (yc>=0) {
                  return yc - size * (cell_size+3);
              }

            }
          }
        }

        if (dir<0){//올릴떄
          var y_chk = CARS[carnum][4]-1;
          var x_chk = CARS[carnum][3];
          var car_exist = false;
          for (var c=y_chk;c>=1;c--){
            if (ar_BOARD[c][x_chk]!=0){
              car_exist = true;
              //var yy = y + size *(cell_size+3);
              var yc2 = chk_crash_y(ar_BOARD[c][x_chk],x,y,0,dir);

              console.log ("앞에 자동차 있음",ar_BOARD[c][x_chk],"방향",yc2);
              if (yc2>=0) {
                return yc2+3;
              }

            }
          }
        }

      }
      if (hv==0){
        //가로 로 움직일때
        if (dir>0){
          var y_chk = CARS[carnum][4];
          var x_chk = CARS[carnum][3]+size;
          var car_exist = false;
          for (var c=x_chk;c<=6;c++){
            if (ar_BOARD[y_chk][c]!=0){
              car_exist = true;
              console.log ("오른쪽에에 자동차 있음",x,y,ar_BOARD[y_chk][c]);
              var xx = x + size *(cell_size+3);
              var xc = chk_crash_x(ar_BOARD[y_chk][c],x,xx,dir);
              if (xc>=0) {
                  return xc - size * (cell_size+3);
              }

            }
          }
        }

        if (dir<0){//왼쪽으로 갈떄
          var y_chk = CARS[carnum][4];
          var x_chk = CARS[carnum][3]-1;
          var car_exist = false;
          for (var c=x_chk;c>=1;c--){
            if (ar_BOARD[y_chk][c]!=0){
              car_exist = true;

              //var yy = y + size *(cell_size+3);
              var xc2 = chk_crash_x(ar_BOARD[y_chk][c],x,xx,dir);

              console.log ("왼쪽에 자동차 있음",ar_BOARD[y_chk][c],"방향",xc2);
              if (xc2>=0) {
                return xc2+3;
              }

            }
          }
        }

      }







      if (hv==0) {
        return x;
      }
      if (hv==90) {
        return y;
      }

    }


    // ---- dir이 양수면은 아래로 이동
    //dir 이 음수면 위로 이동    실제좌표 x 실제좌표y
    //현재사용하고 있지 않음
    function pos_chk(dir,x,y,carnum){

        // ---- 현재 움직이고 있는 자동차의 사이즈
        var size = CARS[carnum][1];
        var hv = CARS[carnum][2];

        if (hv==90) {
          x = x + cell_size/2;
        }
        if (hv==0) {
          y = y + cell_size/2;
        }
        // la_1이라는 레이어 위의 엘리먼트중에서 이름이 car인것을 다 찾아줌
        var cars = la_1.find('.car');

        for (var i=0;i<cars.length;i++){  // length 는 배열의 갯수 입니다.
          //console.log(cars[i].getAttr("id"));  // 각각의 자동차에서 속성을 뽑아냄.
          var num1 = cars[i].getAttr("id");
          var num2 = Number(num1);

          // ---- 움직이는 자기 자동차인경우
          if (carnum==num2) {
            continue;
          }
          var x1 = cars[i].getAttr("x");
          var y1 = cars[i].getAttr("y");
          var width1 = cars[i].getAttr("width");
          var width2 = Number(width1);
          var height1 = cars[i].getAttr("height");
          var height2 = Number(height1);

          // console.log(width2,height2);
          var size1 = 0;
          var hv1 = 0;

          // ----- 세로 자동차..
          if (hv==90) {

                      //아래로 내릴때
                      if (dir>0){

                        var y_chk = CARS[carnum][4]+size;
                        var x_chk = CARS[carnum][3];
                        var car_exist = false;
                        for (var c=y_chk;c<=6;c++){
                          if (ar_BOARD[c][x_chk]!=0){
                            car_exist = true;
                            console.log ("앞에 자동차 있음");
                          }
                        }

                        var yy = y + size *(cell_size+3);
                        console.log (dir, "움직이는자동차",carnum, x,y,"체크해야하는자동차",num2, x1,y1);
                        if (car_exist==true){
                            if ( ( (yy>y1) ) && (x>x1 && x<(x1+width2)) ) { // && y<(y1+height2)
                              console.log(num2 ,"와 충돌");
                              return y1 - size * (cell_size+3);
                            }
                        }

                      }

                      //위로 올릴 떄
                      if (dir<0){
                        var yy = y;// y는 움직이는 자동차의 y좌표    그리고 y1은 충돌할 자동차좌표

                        var y_chk = CARS[carnum][4]-1;
                        var x_chk = CARS[carnum][3];
                        var car_exist = false;
                        for (var c=y_chk;c>=1;c--){
                          if (ar_BOARD[c][x_chk]!=0){
                            car_exist = true;
                            console.log ("앞에 자동차 있음");
                          }
                        }
                        console.log (dir, "움직이는자동차",carnum, x,y,"체크해야하는자동차",num2, x1,y1);
                        if (car_exist==true) {
                          if ( (yy<(y1+height2)) && (x>x1 && x<(x1+width2)) ) { // (yy>0) &&
                            console.log(num2 ,"와 충돌");
                            return (y1 + height2 + 3);
                          }
                        }

                      }
          }

          // -가로자동차 일떄
          if (hv==0) {

            //오른쪽으로 갈떄
            if (dir>0){
              console.log (dir);
              // var y_chk = CARS[carnum][4];
              // var x_chk = CARS[carnum][3]+size;
              // var car_exist = false;
              // for (var c=x_chk;c<=6;c++){
              //   if (ar_BOARD[y_chk][c]!=0){
              //     car_exist = true;
              //     console.log ("앞에 자동차 있음");
              //   }
              // }
              //
              // var xx = x + size *(cell_size+3);//
              // console.log (dir, "움직이는자동차",carnum, x,y,"체크해야하는자동차",num2, x1,y1);
              // if (car_exist==true){
              //     if ( ( (xx>x1) ) && (y>y1 && y<(y1+height2)) ) { // && y<(y1+height2)
              //       console.log(num2 ,"와 충돌");
              //       return x1 - size * (cell_size+3);
              //     }
              // }

            }

            //왼쪽으로  올릴 떄
            if (dir<0){
              console.log (dir);
              // var xx = x;// y는 움직이는 자동차의 y좌표    그리고 y1은 충돌할 자동차좌표
              //
              // var y_chk = CARS[carnum][4];
              // var x_chk = CARS[carnum][3]-1;
              // var car_exist = false;
              // for (var c=x_chk;c>=1;c--){
              //   if (ar_BOARD[y_chk][c]!=0){
              //     car_exist = true;
              //     console.log ("앞에 자동차 있음");
              //   }
              // }
              // console.log (dir, "움직이는자동차",carnum, x,y,"체크해야하는자동차",num2, x1,y1);
              // if (car_exist==true) {
              //   if ( (xx<(x1+width2)) && (y>y1 && y<(y1+height2)) ) { // (yy>0) &&
              //     console.log(num2 ,"와 충돌");
              //     return (x1 + width2 + 3);
              //   }
              // }

            }

          }



        }


/*
        console.log(y);
        if (y>106) {
            y= 106;
            return y
        }
        return y;
*/

      if (hv==0) {
        return x;
      }
      if (hv==90) {
        return y;
      }

      //
      // var hv = CARS[carnum][2];
      //
      // //  방향이 아래로 이동할 경우
      // if (dir>0){
      //   var y1 = parseInt(y/(cell_size+3)) + (size+1);
      //   var x1 = parseInt(x/(cell_size+3)) + 1;
      //   console.log("아래로",x,y,"내번호",carnum, "가상x",x1,"가상y",y1,"다음",ar_BOARD[y1][x1],"각도",hv,size);
      //   // for (var i=0;i<cars.length;i++){
      //   //   // ar_BOARD[y+1][x] == 0;
      //   // }
      //   if (ar_BOARD[y1][x1]==0){
      //     return true;
      //   } else {
      //     return false;
      //   }
      // }
      // if (dir<0){
      //   console.log("위로");
      //
      // }
    }


//--------------------------------------------------------------------------//
//레드카가 나가면 게임 끝나는 알고리즘                                       //
//--------------------------------------------------------------------------//
    function chk_gameclear(){
      if ((ar_BOARD[3][5]==2) && (ar_BOARD[3][6]==2)){
        console.log("게임클리어");
        // $("#popup_game_clear").show();
        // document.getElementById("popup_game_clear").style.display="block";
        UIkit.modal( document.getElementById("popup_game_clear")).show();
        document.getElementById("game_clear_num").innerText=move_count + "단계만에 성공";
        myAudio.play();
        move_count=0;

      }
    }
    //--------------------------------------------------------------------------//
    //다음 게임을 시도하시겠습니까 누르면 다음 게임으로 가게 하는 함수           //
    //--------------------------------------------------------------------------//
    function next_gem() {
      map_loading(+1);
      UIkit.modal( document.getElementById("popup_game_clear")).hide();
    }

    function popup_map(){
      window.open("./map.htm", "_blank", "width=800, height=850,toolbar=no,menubar=no,location=no");
    }

  </script>


</head>
<body>

<!-- 이게 제일 외각박스    -->
<div class="c_size" style="border:0px solid red; width:95%;margin:10px auto 10px auto;height:90%;" >
    <h2 class="uk-heading-bullet">RUSH HOUR(심재이)</h3>
    <!-- 러시아워 상단 부분  -->
    <!--<article style="width:90%;margin:10px auto 10px auto;">러쉬아워</article>-->

    <div id="menu" style="border:0px solid blue; width:100%;">
        <button class ="jbtn" onclick="map_loading(-1);"><</button>
        <button id="b_STAGE_IDX" class="jbtn">_</button>
        <button class="jbtn"  onclick="map_loading(+1);" >></button>
        <!-- <button class="uk-button uk-button-default">게임시작</button> -->
        <button class="jbtn" style="width:90px;font-size:12px;" uk-toggle="target: #modal-example" >게임설명</button>
        <button id="b_count" class="jbtn" style="" >0회</button>
        <img src="./img/ranking.png" onclick="ranking_load();" style="width:43px;cursor: pointer; float: right;" uk-toggle="target:#popup_ranking">
        <img src="./img/setting.png" style="width:43px;cursor: pointer; float: right;" uk-toggle="target:#popup_setting">


    </div>

    <!--러쉬 아워 중간 게임 나오는 부분-->
    <div style="position:relative; border:0px solid orange;width:100%;margin:10px auto 10px auto;height:100%;">

    <!--이 사각박스를 캔버스로 정의함-->
      <div id="rushhour" style="border:0px solid green;width:100%;margin:10px auto 10px auto;position:absolute;">
      </div>

        <div id="ruby" class= "c_ruby" style="background-color:rgba(0, 0, 0, 0.6);border:0px solid red;width:100%;margin:10px auto 10px auto;position:absolute;">
          <div style="border:1px solid white ;width :80%; height: 46%; margin:100px auto auto auto;background-color:white;border-radius:5px;">
            <center><div style="font-size:25px;margin-top:15%;"> <p id="game_num"> 러쉬아워 1 단계</p></div></center>
            <center><button class="uk-button uk-button-primary uk-button-small" style="height:50px;border-radius:5px;margin-top:0%;" onclick="game_start();" >게임시작</button></center>
          </div>
        </div>

    </div>

    <div class="uk-alert-primary" uk-alert style="display:none;position: absolute; left: 40%; top:50%; height:100px;">
        <a class="uk-alert-close" uk-close></a>
        <h2>게임을 시작합니다</h2>
    </div>




      <!-- This is the modal -->
      <div id="modal-example" uk-modal>
          <div class="uk-modal-dialog uk-modal-body">
              <h2 class="uk-modal-title">게임설명</h2>
              <button class="uk-modal-close-default" type="button" uk-close></button>
              <p>
                러시아워는 혼잡한 출근길을 배경으로 한 퍼즐 게임이다. 이 게임의 목적은 빨간색 주인공 자동차를 게임판 밖으로 빼내는 것이다.
                빨간색 자동차의 앞과 옆은 다른 차들이 잔뜩 가로막고 있다. 어떻게 해야 이 빨간색 자동차를 구출할 수 있을까?
              </p>
              <p class="uk-text-right">
                  <!--<button class="uk-button uk-button-default uk-modal-close" type="button">게임시작</button>-->

              </p>
          </div>
      </div>
<!--___________________________________________________________팝업 잇는 곳-->
      <div id="popup_setting" uk-modal>
          <div class="uk-modal-dialog uk-modal-body">
              <h2 class="uk-modal-title">설정</h2>
              <p>
                  <button class="uk-modal-close-default" type="button" uk-close></button>



              </p>
              <p class="uk-text-right">

              </p>
          </div>
      </div>
<!--_________________________________________________________________-->

      <div id="popup_ranking" uk-modal>
          <div class="uk-modal-dialog uk-modal-body">
              <h2 class="uk-modal-title">랭킹</h2>
                <button class="uk-modal-close-default" type="button" uk-close></button>
              <p>
                <table style="width:100%" border="1" cellpadding="2" cellspacing="0"  style="border:1px solid black">
                  <tr style="background-color:#81F7F3">
                	<th>이름</th>
                	<th>단계</th>
                  <th>카운트</th>
                  <th>성공일시</th>
                </tr>
                  <tbody id="table_ranking">

                  </tbody>

                </table>
              </p>
              <p class="uk-text-right">

              </p>
          </div>
      </div>
<!--_________________________________________________________________-->

      <div id="popup_game_clear" uk-modal>
          <div class="uk-modal-dialog uk-modal-body">
              <h2 class="uk-modal-title"><center>Game Clear</center></h2>
              <p>
                  게임을 클리어했습니다
                  <p id="game_clear_num">0 단계만에 성공</p>
              </p>
              <p class="uk-text-right">
                <button id="next_game" onclick="next_gem();">다음게임을 시도하시겠습니까?</button>

              </p>
          </div>
      </div>
<!--___________________________________________________________팝업여기까지-->
    <!-- <a class="uk-button uk-button-default" href="#modal-center" uk-toggle>Open</a> -->

    <div id="modal-center" class="uk-flex-top" uk-modal>
        <div class="uk-modal-dialog uk-modal-body uk-margin-auto-vertical">

            <button class="uk-modal-close-default" type="button" uk-close></button>

            <p>게임준비중.</p>

        </div>
    </div>


  <div style="margin:10px auto 10px auto;border:0px solid black;width:100%;">
    <button id="dqw" onclick="popup_map();"class="jbtn"  style="width:100px;">보드만들기</button>
    <button id="move" class="jbtn" style="width:50px;" onclick="start_move_car();" >풀기</button>
  </div>


    <!--러쉬 아워 하단  부분-->
    <div style="margin:10px auto 10px auto;border:0px solid black;width:100%;">
      <center>
       <br>
      © 2023 Sim.Jay All Rights Reserved. <a href="http://www.jaycom.co.kr/" target="_blank"> 심재이 사이트 </a>

      </center>
    </div>

</div>
<!-- 이게 제일 외각박스   -->

<style>

td {
  text-align: center;
}

</style>

<script>
function ranking_load(){
  console.log(RANKING_DATA);

  var strHTML="";

  for (var i=0;i<RANKING_DATA.length;i++){
    strHTML = strHTML + "<tr> <td >"+RANKING_DATA[i].name+"</td> <td>"+RANKING_DATA[i].level+"</td> <td>"+RANKING_DATA[i].count+"</td> <td>"+RANKING_DATA[i].date+"</td> </tr>";
  }

  document.getElementById("table_ranking").innerHTML = strHTML;

}



</script>

</body>
</html>

<script>


// 문자열 담는 배열 변수 비어 있는 배열 변수 ,전체 스냅샷을 저장하고 있다.
var arHistory = [];


function start_move_car(){
 arHistory = [];
 move_car();
}
//-----------------------------------------------
//
// ---------------------------------------------
function move_car(){  // lvBOARD, lvCARS

  // alert('1');
  var s_num ="";

  // 반복문속에 반복문 ,각각 루프를 돌면서 보드에 있는 숫자를 연결한다
  for (var y=1; y<=board_size; y++){
    for (var x=1;x<=board_size;x++){
      s_num = s_num + ar_BOARD[y][x];
      //console.log(s_num);
    }
  }

  //만약에 전이랑 똑같은게 있으면  -1을 뱉어내는데 -1이라면  계속 추가 하게 함 겹치는 거 있으면 작동 x
  if (arHistory.indexOf(s_num)==-1) {
    arHistory.push(s_num);
    // console.log(arHistory);
  } else {
    return false;
  }

//차량이 10대를 반복해서 한다 .
//자동차의 번호가 낮은순부터 옮김 .
  for (var i=2;i<CARS.length;i++){

          // console.log(CARS[i]);
          //---------------------------------------------------
          //현재 자동차가 가로 자동차일 경우
          if (CARS[i][2]==0){

              var c_x = CARS[i][3];

              var t_x = CARS[i][3]+CARS[i][1]; //자동차의 x좌표인데    오른쪽으로 한칸 갈떄 그 위치
              var t_y = CARS[i][4];//자동차의 y좌표인데 이거는 고정임
              if (ar_BOARD[t_y][t_x]==0) { // 오른쪽으로 한칸이동가능한지 확인
                 ar_BOARD[t_y][t_x] = i;
                 ar_BOARD[t_y][c_x] = 0;
                 CARS[i][3] = c_x + 1;
                 //move_xy(i);

                 if (move_car()==true){
                   return true;
                 } else {
                   ar_BOARD[t_y][t_x] = 0;
                   ar_BOARD[t_y][c_x] = i;
                   CARS[i][3] = c_x ;
                  // move_xy(i);
                 }
              }

              var c_x1 = CARS[i][3]+(CARS[i][1]-1);// 뒤에 좌표
              var t_x1 = CARS[i][3]-1;//마리에서 왼쪽으로 한칸
              var t_y1 = CARS[i][4];// y좌표
              if (ar_BOARD[t_y1][t_x1]==0) { // 왼쪽으로 한칸 이동가능한지 확인
                ar_BOARD[t_y1][t_x1] = i;
                ar_BOARD[t_y1][c_x1] = 0;
                CARS[i][3] = CARS[i][3] - 1;
                //move_xy(i);
                if (move_car()==true){
                  return true;
                }else {
                  ar_BOARD[t_y1][t_x1] = 0;
                  ar_BOARD[t_y1][c_x1] = i;
                  CARS[i][3] = t_x1+1;
                  //move_xy(i);
                }

              }

          }
          //-------------------------------------------여기
          if (CARS[i][2]==90){//세로자동차일떄

              var c_y = CARS[i][4];

              var t_y = CARS[i][4]+CARS[i][1]; //자동차의 x좌표인데    오른쪽으로 한칸 갈떄 그 위치
              var t_x = CARS[i][3];//자동차의 y좌표인데 이거는 고정임
              if (ar_BOARD[t_y][t_x]==0) { // 오른쪽으로 한칸이동가능한지 확인
                 ar_BOARD[t_y][t_x] = i;
                 ar_BOARD[c_y][t_x] = 0;
                 CARS[i][4] = c_y + 1;
                 //move_xy(i);
                 if (move_car()==true){
                   return true;
                 }else{
                     ar_BOARD[t_y][t_x] = 0;
                     ar_BOARD[c_y][t_x] = i;
                     CARS[i][4] = c_y ;
                     // move_xy(i);
                 }

              }

              var c_y1 = CARS[i][4]+(CARS[i][1]-1);// 뒤에 좌표
              var t_y1 = CARS[i][4]-1;//마리에서 왼쪽으로 한칸
              var t_x1 = CARS[i][3];// y좌표
              if (ar_BOARD[t_y1][t_x1]==0) { // 왼쪽으로 한칸 이동가능한지 확인
                ar_BOARD[t_y1][t_x1] = i;
                ar_BOARD[c_y1][t_x1] = 0;
                CARS[i][4] = CARS[i][4] - 1;
                //move_xy(i);
                if (move_car()==true){
                  return true;
                }else{
                    ar_BOARD[t_y1][t_x1] = 0;
                    ar_BOARD[c_y1][t_x1] = i;
                    CARS[i][4] =t_y1+1 ;
                    // move_xy(i);
                }

              }

          }

          if (ar_BOARD[3][6]==2){
            console.log("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" , CARS[i],ar_BOARD);
            alert("성공");
            // move_xy(2);
            return true;
          }

          console.log(CARS[i],ar_BOARD);

  }

  return false;



}



function move_xy(carnum){

  var y=CARS[carnum][4];
  var x=CARS[carnum][3];

  x = x - 1;
  y = y - 1;

  //자동차 축을 기준으로  y축의 위치를 구하는 식
  var i_posy = (cell_size*y)+3*y;
  // //자동차 축을 기준으로  x축의 위치를 구하는 식
  var i_posx = (cell_size*x)+3*x;

  var cars = la_1.find('.car');  // la_1이라는 레이어 위의 엘리먼트중에서 이름이 car인것을 다 찾아줌

  for (var i=0;i<cars.length;i++){
    var num1 = cars[i].getAttr("id");
    var num2 = Number(num1);
    if (carnum==num2){
      cars[i].x(i_posx);
      cars[i].y(i_posy);
      cars[i].draw();
    }
  }
      // {2,2,0,5,3}
}
</script>
